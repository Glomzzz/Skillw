{
  "blogPosts": [
    {
      "id": "welcome",
      "metadata": {
        "permalink": "/blog/welcome",
        "editUrl": "https://github.com/Skillw/Website/blog/2023-11-30-welcome/index.md",
        "source": "@site/blog/2023-11-30-welcome/index.md",
        "title": "欢迎",
        "description": "欢迎来到我的博客！",
        "date": "2023-11-30T00:00:00.000Z",
        "formattedDate": "2023年11月30日",
        "tags": [
          {
            "label": "hello",
            "permalink": "/blog/tags/hello"
          },
          {
            "label": "docusaurus",
            "permalink": "/blog/tags/docusaurus"
          }
        ],
        "readingTime": 0.095,
        "hasTruncateMarker": false,
        "authors": [
          {
            "name": "Glom_",
            "title": "Maintainer of Skillw",
            "url": "https://github.com/Glom-c",
            "imageURL": "https://avatars.githubusercontent.com/u/70137442",
            "key": "Glom_"
          }
        ],
        "frontMatter": {
          "slug": "welcome",
          "title": "欢迎",
          "authors": [
            "Glom_"
          ],
          "tags": [
            "hello",
            "docusaurus"
          ]
        },
        "nextItem": {
          "title": "编程思想",
          "permalink": "/blog/2022/7/16/codemind/codemind"
        }
      },
      "content": "欢迎来到我的博客！  \n\n有时间会更新一些好玩的。"
    },
    {
      "id": "/2022/7/16/codemind/codemind",
      "metadata": {
        "permalink": "/blog/2022/7/16/codemind/codemind",
        "editUrl": "https://github.com/Skillw/Website/blog/2022-7-16-codemind/codemind.md",
        "source": "@site/blog/2022-7-16-codemind/codemind.md",
        "title": "编程思想",
        "description": "前言",
        "date": "2022-07-16T00:00:00.000Z",
        "formattedDate": "2022年7月16日",
        "tags": [
          {
            "label": "codemind",
            "permalink": "/blog/tags/codemind"
          }
        ],
        "readingTime": 9.895,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Glom_",
            "title": "Maintainer of Skillw",
            "url": "https://github.com/Glom-c",
            "imageURL": "https://avatars.githubusercontent.com/u/70137442",
            "key": "Glom_"
          }
        ],
        "frontMatter": {
          "title": "编程思想",
          "authors": "Glom_",
          "tags": [
            "codemind"
          ],
          "toc_min_heading_level": 2,
          "toc_max_heading_level": 4
        },
        "prevItem": {
          "title": "欢迎",
          "permalink": "/blog/welcome"
        },
        "nextItem": {
          "title": "Prolog 教程 基础",
          "permalink": "/blog/prolog/basic"
        }
      },
      "content": "## 前言\n\n这里是我学习编程思想的笔记，有需要的同学可以看看。\n\n若发现有误，请尽量向我提出(qq 88595433 , email glom@skillw.com)\n\n![金字塔](./images/total.png)\n\n<!-- truncate -->\n\n## 基础\n\n### 高内聚 低耦合\n\n##### 模块内部元素的相似程度高\n##### 模块之间的依赖程度低\n\n> 模块，即可以输入输出的一个整体 （例如 一个方法 一个类 一个项目都是）\n\n##### 高内聚低耦合是整个编程思想的基础，是编程的最终目的\n\n### 类与类之间的关系\n\n##### 泛化 实现 组合 聚合 关联 依赖\n\n![](./images/basic-total.png)\n\n#### 泛化 (继承)\n\n类与类间的关系\n\nAnimal 是 Tiger 的泛化，Tiger 是 Animal 的特化\n\n![继承](./images/extend.png)\n\n#### 实现\n\n类与接口间的关系\n\n![实现](./images/impl.png)\n\n#### 组合 (强拥有)\n\n整体和部分的关系\n\n个体/部分没有独立的生命周期，与整体的[生命周期](https://baijiahao.baidu.com/s?id=1699294221762201695&wfr=spider&for=pc)保持一致\n\n组合是把个体类对象作为整体类的成员对象\n\n![强拥有](./images/strong_own.png)\n\n#### 聚合 (弱拥有)\n\n整体与部分的关系\n\n个体有独立的生命周期\n\n聚合是把个体类对象的指针(引用)作为整体类的属性\n\n![弱拥有](./images/soft_own.png)\n\n#### 关联\n\n一种拥有关系，不分强拥有弱拥有 （注意与 聚合/组合 的区别）\n\n关联是使一个类知道另一个类的属性或方法\n\n![关联](./images/link.png)\n\n#### 依赖\n\n依赖是一种使用关系\n\n![依赖](./images/depend.png)\n\n### 总结\n\n若 A 要用到 B，则箭头是由 A 到 B\n\n![总结](./images/total.png)\n\n## 设计原则\n\n### 单一职责 [SRP]\n\nSingle Responsibility Principle\n\n- 一个类只干一件事\n- 有且只有一个引起类改变的原因\n\n> 两大原因:\n> \n> 内部改变 - 需要更改方法代码 -> 不能改此类代码\n> \n> 外部改变 - 需要增加方法 -> 只能有这一个原因\n\n##### 解决方法:\n\n面向抽象编程，把类中方法代码改为接口的调用\n\n（同类型的方法提到同一个接口中）\n\n### 开放封闭原则 [OCP]\n\nOpen Closed Principle\n\n##### 面向对象所有原则的核心 面向对象设计的终极目标\n\n- 对功能扩展开放，面向修改代码封闭\n\n即：当需求改变时，在不修改已有代码的前提下，通过拓展功能，使其满足需求\n\n并且只能改某个点的代码，而不是牵一动百\n\n##### 解决方法:\n\n面向抽象编程，使用抽象封装变化\n\n### 里氏替换原则 [LSP]\n\nLiskov Substitution Principle\n\n- 子类可以替换父类\n\n![截图](./images/reletionship.png)\n\n### 接口分离原则 [ISP]\n\nInterface Segragation Principle\n\n##### 设计接口时采用，但首先必须满足单一职责原则\n\n- 客户端不应该依赖它不需要的接口\n- 一个类对另一个类的依赖应该建立在最小接口上\n\n> 单一职责原则 -> 高内聚\n> \n> 接口隔离原则 -> 低耦合\n\n##### 解决方法\n\n接口尽量细分，不要在一个接口中放很多方法\n\n### 依赖倒置原则 [DIP]\n\nDependence Inversion Principle\n\n##### 开放封闭原则的基础\n\n- 高层模块(调用者) 不应该依赖于 低层模块(被调用者)，都应依赖于抽象\n- 抽象不应依赖于实现，实现应依赖于抽象\n- 本质 通过抽象是各个模块的实现彼此独立，互不影响，实现模块间的松耦合\n\n> 依赖：存在模块 A, B\n> \n>  A的变化有没有可能引起B的变化，如果有可能，那么B是依赖于A的。这里的变化是指需不需要修改代码。\n\n##### 解决方法:  通过接口依赖\n\n你可以：\n\n- 通过方法传递\n- 通过构造方法传递\n- 通过属性的set方法传递\n\n### 迪米特原则/最少知识原则\n\n##### 设计类时采用\n\n- 一个对象应该对其他对象有最少的了解\n- 降低类之间的耦合\n\n##### 解决方法\n\n只和直接朋友通信\n\n> 直接朋友:\n> \n> 1. 成员对象\n> 2. 方法参数\n> 3. 方法返回值\n> \n> 出现在局部变量中的类，不是直接朋友\n\n### 合成复用原则 [CRP]\n\nComposite Reuse Principle\n\n###### 将已有对象纳入到新对象中，作为新对象的对象成员来实现，新对象可以调用已有对象的功能，从而达到复用\n\n- 尽量使用对象组合而不是继承来达到复用\n\n##### 继承的问题\n\n- 破坏了系统的封装性，基类发生了改变，子类的实现也会改变\n- 子类可能不需要父类某个方法，那么系统耦合性会变高\n- 继承是静态的，不能在运行时发生改变\n\n##### 解决方法\n\n\"拥有\"组合， \"是\"继承。![x](./images/wrong_structure.png)\n\n上面显得非常臃肿，不符合合成复用原则，下图为解决办法\n\n![o](./images/correct_structure.png)\n\n### 总结\n\n设计原则是高内聚低耦合的具体体现\n\n![总结](./images/mode-total.png)\n\n## 设计模式\n\n### 单例模式\n\n在程序运行中，保证某一个类，有且只有一个实例\n\n#### 饿汉式\n\n```java\nclass LazyManSingle {\n    private static final LazyManSingle INSTANCE = new LazyManSingle();\n\n    private LazyManSingle(){\n\n    }\n\n    public static LazyManSingle getInstance() {\n        return INSTANCE;\n    }\n\n}\n```\n\n缺点：\n\n单例在类初始化时就实例化了，但客户可能不会用这个单例，就造成了资源的浪费。\n\n解决办法即 懒汉式(Lazy) 或 内部静态类 或 枚举\n\n#### 懒汉式\n\n```java\nclass LazyManSingle {\n    private static LazyManSingle instance;\n\n    private LazyManSingle(){\n\n    }\n\n    public static LazyManSingle getInstance() {\n        if (instance == null) {\n            instance = new LazyManSingle();\n        }\n        return instance;\n    }\n}\n```\n\n缺点：\n\n不是线程安全的\n\n如果有个客户多线程调用，那就会寄\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        for (int i = 0; i < 10; i++) {\n            new Thread(() -> {\n                LazyManSingle single = LazyManSingle.getInstance();\n                single.print();\n            }).start();\n        }\n    }\n}\n\nclass LazyManSingle {\n    private static LazyManSingle instance;\n\n    private LazyManSingle(){\n\n    }\n\n    public static LazyManSingle getInstance() {\n        if (instance == null) {\n            instance = new LazyManSingle();\n            System.out.println(\"Construct!\");\n        }\n        return instance;\n    }\n\n    public void print() {\n        System.out.println(this.hashCode());\n    }\n}\n```\n\n运行结果如下：\n\n```\nConstruct!\n2069791201\n2069791201\n2069791201\n2069791201\nConstruct!\n2069791201\n2069791201\n2069791201\n2069791201\nConstruct!\n2069791201\n2069791201\n进程已结束。\n```\n\n可以发现，虽然拿到的单例都是同一个，但程序运行过程中实例化了 3 次，浪费了内存。\n\n所以为了防止有客户这样做，我们应该写线程安全的懒汉式单例\n\n#### 线程安全的懒汉式\n\n即用即造，造完之后直接用\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        for (int i = 0; i < 10; i++) {\n            new Thread(() -> {\n                LazyManSingle single = LazyManSingle.getInstance();\n                single.print();\n            }).start();\n        }\n    }\n}\n\nclass LazyManSingle {\n    private static volatile LazyManSingle instance;\n\n    private LazyManSingle(){\n\n    }\n\n    public static LazyManSingle getInstance() {\n        if (instance == null) {\n            synchronized (LazyManSingle.class) {\n                if (instance == null) {\n                    instance = new LazyManSingle();\n                    System.out.println(\"Construct!\");\n                }\n            }\n        }\n        return instance;\n    }\n\n    public void print() {\n        System.out.println(this.hashCode());\n    }\n}\n```\n\n使用同步锁：防止多个线程同时执行\n\n双重判断：让在赋值后的线程直接返回，而不是进锁\n\nvolatile：避免[指令重排](https://baijiahao.baidu.com/s?id=1701616903992143186&wfr=spider&for=pc)\n\n运行结果如下：\n\n```\nConstruct!\n2069791201\n2069791201\n2069791201\n2069791201\n2069791201\n2069791201\n2069791201\n2069791201\n2069791201\n2069791201\n```\n\n如此这般，我们便得到了一个 线程安全的懒汉式单例\n\n此外，还有一种方法实现单例，即内部静态类\n\n#### 内部静态类\n\n也可以实现懒加载\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        LazyManSingle single = LazyManSingle.getSingle();\n        single.print();\n    }\n}\n\nclass LazyManSingle {\n    public static LazyManSingle getSingle() {\n      //执行这一行时才会实例化\n        return Inner.single;\n    }\n\n    private LazyManSingle(){\n\n    }\n\n    public void print() {\n        System.out.println(this.hashCode());\n    }\n\n    public static class Inner {\n        private static final LazyManSingle single = new LazyManSingle();\n    }\n}\n```\n\n但是！由于 java 中有反射 API 这种变态的存在，以上所有的私有构造方法在反射面前都是毛毛雨。\n\n```java\nConstructor<?> constructor = LazyManSingle.class.getDeclaredConstructors()[0];\nconstructor.setAccessible(true);\nObject o = constructor.newInstance();\n```\n\n可谓防君子不防小人，所以我们要用到 枚举式\n\n#### 枚举式\n\n```java\npublic enum LazyManSingle {\n    INSTANCE;\n    public void print(){\n        System.out.println(this.hashCode());\n    }\n}\n```\n\n#### 总结\n\n饿汉式：如果一定会用这个单例，就用饿汉式\n\n懒汉式： 单线程应用\n\n线程安全的懒汉式：多线程应用\n\n枚举式：仅限 java，完美解决"
    },
    {
      "id": "/prolog/basic",
      "metadata": {
        "permalink": "/blog/prolog/basic",
        "editUrl": "https://github.com/Skillw/Website/blog/prolog/basic.md",
        "source": "@site/blog/prolog/basic.md",
        "title": "Prolog 教程 基础",
        "description": "前言",
        "date": "2022-07-13T18:00:00.000Z",
        "formattedDate": "2022年7月13日",
        "tags": [],
        "readingTime": 10.565,
        "hasTruncateMarker": true,
        "authors": [
          {
            "name": "Glom_"
          }
        ],
        "frontMatter": {
          "title": "Prolog 教程 基础",
          "date": "2022-07-13T18:00",
          "author": "Glom_"
        },
        "prevItem": {
          "title": "编程思想",
          "permalink": "/blog/2022/7/16/codemind/codemind"
        }
      },
      "content": "## 前言\n\n> 本教程部分摘录自《七周七语言》  \n\n**Prolog**是一门**逻辑**编程语言，它于1972年由[Alain Colmerauer](https://zhuanlan.zhihu.com/p/432871713)和[Phillipe Roussel](https://zhuanlan.zhihu.com/p/432871713)开发完成，在**自然语言处理领域**(NLP)颇受欢迎.  \n现在，从调度系统到专家系统，这门备受尊重的语言为各类问题提供了编程基础，  \n你可以使用这门基于规则的语言来表达逻辑和提出问题.\n<!-- truncate -->\n和**SQL**一样:\n\n- **Prolog**基于数据库，但是其数据由逻辑规则和关系组成\n- **Prolog**包含两个部分：一部分用于描述数据，而另一部分则用于查询数据\n\n在**Prolog**中，数据以逻辑规则的形式存在，下面是基本构建单元.  \n\n- **事实**. 事实是关于真实世界的基本断言.  （Babe是一头猪，猪喜欢泥巴. ）\n- **规则**. 规则是关于真实世界中一些事实的推论.  （如果一个动物是猪，那么它喜欢泥巴. ）\n- **查询**. 查询是关于真实世界的一个问题.  （Babe喜欢泥巴吗？）\n事实和规则被放入一个**知识库**中. **Prolog**编译器会将这个**知识库**编译成一种适于高效查询的形式.  \n当我们学习这些例子的时候，你可以使用**Prolog**表达知识库.  \n然后你就可以直接检索数据，也可以使用**Prolog**将多个规则串联在一起来得到一些你可能不知道的事情.  \n关于**Prolog**的背景介绍已经足够多了. 让我们开始正式的学习吧.  \n\n关于配置开发环境，搜索引擎上就有，不赘述了。\n\n## 基本构建单元\n\n在一些语言中，大写字母如何使用完全由程序员自行决定。不过在**Prolog**中，**第一个字母的大小写**是有着重要意义的：\n\n- 如果一个词以**小写字母**开头，那么它就是一个**常量**\n- 如果一个词以**大写字母**或**下划线**开头，那么它就是一个**变量**。\n\n让我们用一些事实来构建一个简单的知识库吧。\n\n> types.pl\n\n```prolog\n% 我是注释\n\nmove(dog).\nbreath(dog).\nlike(dog,flower).\n\nmove(cat).\nbreath(cat).\nlike(cat,flower).\nlike(cat,grass).\n\nbreath(grass).\nbreath(flower).\n\nplant(X) :- \\+ move(X), breath(X).\nanimal(X) :- move(X), breath(X).\nfriend(X,Y) :- \\+ (X=Y), like(X,Z), like(Y,Z).\n\n\n```  \n\n上述代码是由**事实**和**规则**组成的**知识库**。  \n前几行语句是**事实**，最后两行语句是一个**规则**。\n**事实**是我们对这个世界直接观察的结果。  \n**规则**是关于现实世界的逻辑推论。  \n现在，注意前几行语句。其中每一行都是一个**事实**:\n\n- 狗可以移动与呼吸, 喜欢花\n- 猫可以移动与呼吸, 喜欢花和草\n- 草可以呼吸\n- 花可以呼吸\n\n那么, 让我们进入编译器中, 输入`['types.pl']`, 此时解释器会编译知识库.\n除非**Prolog**在等待一个中间结果，否则它都会用**yes**或**no**作出回应。  (true 或 false 同理)\n\n- 输入 `move(cat)` , 输出 **yes**\n- 输入 `breath(dog)` , 输出 **yes**\n- 输入 `move(grass)` , 输出 **no**\n\n这些问题都非常直观, **Prolog**仅仅是鹦鹉学舌般地将事实重新呈现给你。  \n当你开始加入一些逻辑时，它才会变得更为精彩。让我们看看一些推论吧。  \n\n- 输入 `plant(grass)`, 输出 **yes**\n- 输入 `animal(grass)`, 输出 **no**\n- 输入 `friend(dog,cat)`, 输出 **yes**\n- 输入 `friend(cat,dog)`, 输出 **yes**\n\n这样，**Prolog**就根据设置的规则来回答**yes**或**no**的问题，这里远比外表看起来的有深度。\n看一下`plant`规则：\n看看`:-`右边的第一部分吧，这部分被称为一个**子目标**。  \n`\\+`执行逻辑取反操作，这样`\\+ move(X)`的意思就是`X不会移动`。  \n只有`X`**不会动**且**会呼吸**时，它才是植物.  \n\n再看一下`friend`规则:  \n在规则中，如果`X`不与`Y`相同，且他们喜欢同一个事物，那么`X`与`Y`互为朋友。  \n\n- 输入 `friend(cat,flower)`, 输出 **no**\n\n现在让我们正式地介绍一下**规则的定义**:  \n\n```prolog\nfriend(X,Y) :- \\+ (X=Y), like(X,Z), like(Y,Z).\n```\n\n上述代码是一个具有三个变量`X`、`Y`和`Z`的****Prolog**规则**。我们把这个规则称作**friend/2**，即有两个参数的**friend规则**的缩写。  \n这个规则拥有三个用逗号分隔的**子目标**。当所有子目标都为真时，这个规则才为真。  \n所以我们这个规则的含义是：**如果X与Y不等同且X和Y都喜欢同一个Z，那么X是Y的朋友。**  \n\n\n## 填空\n\n我们用**Prolog**回答了一些**yes**或**no**的问题，不过我们能做的可不止这些。  \n在这一节中，我们将使用**逻辑引擎**为一个查询找出所有可能的匹配。要做到这一点，你需要在查询中指定一个变量。  \n\n> food.pl\n\n```prolog\n\ntype(sausage,meat).\ntype(beaf,meat).\ntype(cake,dessert).\ntype(candy,dessert).\ntype(cola,soda).\n\nflavor(savory,meat).\nflavor(sweet,dessert).\nflavor(sweet,soda).\n\nfood(X,Y) :- type(X,Z), flavor(Y,Z).\n\n```\n我们给出了一些事实。诸如`type(sausage, meat)`，意思是一种食物具有一定的类型。  \n另外一些诸如`flavor(sweet, dessert)`，意思是一种食物类型具有特有的味道。  \n最后，我们出了一个名为**food**的规则，它可推断出食物的味道。  \n如果食物`X`属于`Z`类食物且`Z`也具有特有味道`Y`，则食物`X`是`Y`食物。  \n\n让我们进入编译器中, 输入`['food.pl']`。  \n\n```bash\n\n\n?- type(What,meat).\nWhat = sausage ;\nWhat = beaf.\n\n```\n\n现在很有趣。我们请求**Prolog**，“找出一些满足查询food(What, savory)的值。”**Prolog**找到了一个sausage。输入;，请求**Prolog**找出下一个，它返回了beaf。  \n由于这些查询依赖**基本事实**，所以值很容易找到。再试试:\n\n```bash\n?- food(What,sweet).\nWhat = cake ;\nWhat = candy ;\nWhat = cola.\n```\n\n记住，`food(X, Y)`是一个规则，不是一个事实。我们请求**Prolog**找出满足“什么食物是savory？”这个查询的所有可能值。  \n**Prolog**必须将关于食物、类型和味道的基本事实联系在一起才能得出最终结论。  \n**逻辑引擎需要遍历所有使目标为真的可能组合。**\n\n### 地图着色问题\n\n经典的高中题。  \n\n[map-color](images/map-color.png)\n\n下面用同样的思路来进行地图着色。为了更深入地观察**Prolog**，我们采用了这个例子。  \n这里要给上面的地图着色，填充图中所展示的各区域。我们不想两个接壤的区域具有相同颜色。  \n\n> map.pl\n\n```prolog\ncolor(red).\ncolor(green).\ncolor(blue).\n\ncolorify(A,B,C,D,E) :-\n    color(A), color(B), color(C), color(D), color(E),\n    \\+ A=B, \\+ A=C, \\+ A=D, \\+ A=E,\n    \\+ B=C, \\+ C=D, \\+ D=E.\n```\n\n加载**map.pl**并执行表达式`colorify(A,B,C,D,E)`，**Prolog** 就会将三种颜色依次赋值给变量，测试哪些组合是可能的结果。  \n\n```bash\n?- colorify(A,B,C,D,E).\nA = red,\nB = D, D = green,\nC = E, E = blue;\nA = red,\nB = D, D = blue,\nC = E, E = green ;\nA = green,\nB = D, D = red,\nC = E, E = blue ;\nA = green,\nB = D, D = blue,\nC = E, E = red ;\nA = blue,\nB = D, D = red,\nC = E, E = green ;\nA = blue,\nB = D, D = green,\nC = E, E = red ;\n```\n\n果然，有一种方法可以使用三种颜色对这五个区域进行着色。你也可以通过输入`;`得到另外几种着色组合。通过不到十行代码，我们就完成了地图着色。  \n这个逻辑非常简单，即便是小孩子都可以理解。某个时候，你要问自己……  \n\n### 程序在哪?\n\n我们没有使用算法！试试选一门**过程式编程语言**来解决这个问题。你的解决方法容易理解吗？考虑一下如果用**Java**或**Javascript**来解决这样复杂的逻辑问题你需要做些什么？  \n一个可能的解决方法如下：  \n(1) 收集和整理逻辑；  \n(2) 用程序表达逻辑；  \n(3) 找出所有可能的解决方法；  \n(4) 通过程序验证这些可能的解决方法。  \n你可能不得不一遍又一遍地去编写程序。**Prolog**让你通过事实和推论来表达逻辑，然后直接提问即可。  \n你不必用这门语言去制作任何具有详细步骤的烹饪食谱。  \n**Prolog**不是通过编写算法来解决逻辑问题的，而是通过如实地描述真实世界，来呈现计算机可以设法解决的逻辑问题。  \n让计算机做这些工作吧！"
    }
  ]
}